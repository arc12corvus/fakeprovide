#!/bin/bash -ex
#
# This script will generate an RPM that "provides" a named dependency.

RPM_BUILDARCH=noarch
RPM_SUMMARY=
RPM_BUILD_SOURCE=0
RPM_BUILD_BINARY=1
RPM_ADDL_PROVIDES=()
RPM_GROUP_NAME=Fake
RPM_LICENSE=GPL
RPM_README_SOURCE_PATH=""

# Exit with an error message.
die () {
	echo "$0: ERROR: $1" >&2
	[ "$2" ] && cat "$2" >&2
	exit 1
}

# Show usage information.
usage () {
	echo "$0: usage: $0 [ -v version ] [ -a arch ] [ -s summary ] [-P extra provides] [ -BS ] [-L license name(defaults to GPL)] [-G group (defaults to 'Fake')] [-R README text file path to copy from] name"
}

generate_command="$0 $@"

while getopts 'a:s:hSBP:v:L:G:R:' ch; do
	case $ch in
		(a)	RPM_BUILDARCH="$OPTARG";;
		(s)	RPM_SUMMARY="$OPTARG";;
		(S)	RPM_BUILD_SOURCE=1;;
		(B)	RPM_BUILD_BINARY=0;;
		(P)	RPM_ADDL_PROVIDES+=($OPTARG);;
		(v)	RPM_VERSION="$OPTARG";;
		(L) RPM_LICENSE="$OPTARG";;
		(G) RPM_GROUP_NAME="$OPTARG";;
		(R) RPM_README_SOURCE_PATH="$OPTARG";;
		(h)	usage
			exit 0
			;;

		(\?)	usage >&2
			exit 2
			;;
	esac
done
shift $(( $OPTIND - 1 ))

# Put everything in a temporary directory 
# (and clean it up when we're done).
tmpdir=$(mktemp -d -t rpmspecXXXXXX)
trap "rm -rf $tmpdir" EXIT INT QUIT TERM HUP
echo "RPM_GROUP_NAME:${RPM_GROUP_NAME}"
echo "RPM_LICENSE:${RPM_LICENSE}"

provide=$1

if [ ! "$provide" ]; then
	die "nothing to provide."
fi

mkdir -p $tmpdir/rpmbuild/{SOURCES,BUILD,RPMS/$RPM_BUILDARCH}


generated_ts=$(date -u "+%Y/%m/%d %H:%M:%S UTC")
generated_readme_path="$tmpdir/rpmbuild/SOURCES/README"

if [ "${RPM_README_SOURCE_PATH}" == "" ]; then
cat > "${generated_readme_path}" <<EOF
This package was generated by fakeprovide.
See http://github.com/larsks/fakeprovide/ for more information.
EOF
elif [[ condition ]]; then
	cp -v "${RPM_README_SOURCE_PATH}" "${generated_readme_path}"
fi

echo >> "${generated_readme_path}"

generated_info="Generated with:'${generate_command}' on ${generated_ts}"

echo  "${generated_info}" >> "${generated_readme_path}"


# Create the RPM spec file.
cat > $tmpdir/fakeprovide.spec <<EOF
Name:		fakeprovide-$provide
Version:	${RPM_VERSION:-${generated_ts}}
Release:	1%{?dist}
Summary:	${RPM_SUMMARY:-Fake provider for $provide.}

Group:		${RPM_GROUP_NAME}
License:	${RPM_LICENSE}
BuildRoot:	%(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)

Source:		README
Provides:	$provide

$(for p in "${RPM_ADDL_PROVIDES[@]}"; do
echo "Provides: $p"
done)

BuildArch:	$RPM_BUILDARCH

%description
%{summary}
${generated_info}

%prep
%setup -c -T

%build
cp %{SOURCE0} .


%install

%files
%defattr(-,root,root,-)
%doc README



%changelog

EOF

echo "Content of ${generated_readme_path}"
cat "${generated_readme_path}"
echo ""

# We want to avoid problems caused by a local .rpmmacros file, so
# we point HOME to our temporary directory.
export HOME=$tmpdir

if [ "$RPM_BUILD_SOURCE" = 1 ]; then
	echo "Building source RPM (SRPM)." >&2
	rpmbuild -bs --define "_topdir $tmpdir/rpmbuild" $tmpdir/fakeprovide.spec > $tmpdir/srpm.log 2>&1 ||
		die "Failed to build source RPM." $tmpdir/srpm.log
fi

if [ "$RPM_BUILD_BINARY" = 1 ]; then
	echo "Building binary RPM." >&2
	if [ "$RPM_BUILDARCH" = noarch ]; then
		rpmbuild -bb --define "_topdir $tmpdir/rpmbuild" $tmpdir/fakeprovide.spec > $tmpdir/rpm.log 2>&1 ||
			die "Failed to build binary RPM." $tmpdir/rpm.log
	else
		setarch $RPM_BUILDARCH rpmbuild -bb --define "_topdir $tmpdir/rpmbuild" $tmpdir/fakeprovide.spec > $tmpdir/rpm.log 2>&1 ||
			die "Failed to build binary RPM." $tmpdir/rpm.log
	fi
fi

for rpm in $tmpdir/rpmbuild/RPMS/*/*.rpm $tmpdir/rpmbuild/SRPMS/*.rpm; do
	[ -f "$rpm" ] || continue

	cp "$rpm" .
	ls "$(basename $rpm)"
done


